---
title: "Data Analysis Assignment 02 - Resume Data"
format: html
editor: visual
jupyter: ir
---

```{r, echo=FALSE}
#Importing Libraries
library(dplyr)
library(caret)
#Reading the data
library(openintro)
data("resume")

#Storing it in a dataframe called 'base_data'
base_data <- resume
```

```{r}
head(resume)
print(nrow(base_data))
print(ncol(base_data))
```

```{r, echo = FALSE}
#glimpse(base_data)
```

```{r}

```

# Model Documentation

Research Question: How do race and gender influence job application callback rates?

Since this is an inference problem - focus less on the model (ideally just take the coefficients from there) and focus more on the correlations between variables - scatter plots and such - create a table with variable - significance - coefficient - comment

### 1. Overview

The resume data in the OpenIntro Library is a dataset of Resumes that were used to apply for job profiles, and whether or not they recieved a callback. The resume dataset contains the following fields -

-   *Job Details* - These include details such as City, Industry, Job Title, Private/Non Profit, required education, and required skills
-   *Applicant Details* - Details about the applicant, such as Gender, Race, years of education, college degree, skills, and years of experience
-   *Resume Details* - Details about the resume, such Email available, Resume Quality
-   *Callback* - whether the applicant received a call back for this job posting for their resume (1 or 0) - this will be the *dependent variable*

The dataset will be used to train a logistic regression model to predict the probability of receiving an interview invite, given the gender and socioeconomic class of the applicant.

```{r}
library(ggplot2)
plot_resume <- ggplot(resume, aes(gender, received_callback)) + 
  geom_point() + facet_grid(. ~ job_type) + stat_smooth(method = "lm")

plot_resume
```

### 2. Data Cleaning

```{r}
resume$gender_factors <- factor(resume$gender, levels = c("m", "f"))
resume$resume_quality_factors <- factor(resume$resume_quality, levels = c("low", "high"))
resume$race_factors <- factor(resume$race, levels = c("black", "white"))
resume$job_equal_opp_employer <- as.factor(resume$job_equal_opp_employer)
resume$job_fed_contractor <- as.factor(resume$job_fed_contractor)
resume$job_req_any <- as.factor(resume$job_req_any)
resume$job_req_communication <- as.factor(resume$job_req_communication)
resume$job_req_education <- as.factor(resume$job_req_education)
resume$job_req_min_experience <- as.factor(resume$job_req_min_experience)
resume$job_req_computer <- as.factor(resume$job_req_computer)
resume$job_req_organization <- as.factor(resume$job_req_organization)
resume$honors <- as.factor(resume$honors)
resume$worked_during_school <- as.factor(resume$worked_during_school)
resume$computer_skills <- as.factor(resume$computer_skills)
resume$special_skills <- as.factor(resume$special_skills)
resume$volunteer <- as.factor(resume$volunteer)
resume$military <- as.factor(resume$military)
resume$employment_holes <- as.factor(resume$employment_holes)
resume$has_email_address <- as.factor(resume$has_email_address)
```

### 3. Modeling

```{r}
set.seed(9482)
sample <- sample(c(TRUE, FALSE), nrow(resume), replace=TRUE, prob=c(0.8,0.2))
train <- resume[sample,]
test <- resume[!sample,]

model <- glm(received_callback~
               #job_city+
               #job_industry+
               #job_type+
               #resume_quality_factors+
               gender_factors+
               race_factors+
               years_college+
               college_degree+
               honors+
               worked_during_school+
               years_experience+
               computer_skills+
               volunteer+
               military+
               employment_holes+
               has_email_address
             , family="binomial", data=resume)
options(scipen=999)
summary(model)

resume$test_results <- predict(model, resume, type = 'response')
table_mat <- table(resume$received_callback, test_results > 0.2)
table_mat

precision <- function(matrix) {
	# True positive
    tp <- matrix[2, 2]
	# false positive
    fp <- matrix[1, 2]
    return (tp / (tp + fp))
}
print(precision(table_mat))
recall <- function(matrix) {
# true positive
    tp <- matrix[2, 2]# false positive
    fn <- matrix[2, 1]
    return (tp / (tp + fn))
}
print(recall(table_mat))


library(caret)
threshold <- 0.2
confusionMatrix(factor(resume$test_results>threshold), factor(resume$received_callback==1), positive="TRUE")
```

### 4. Results

### 5. Future Work
